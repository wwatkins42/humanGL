#pragma once

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <iostream>
#include <string>
#include <array>
#include <forward_list>

#include "Exception.hpp"
#include "Matrix.hpp"
#include "Shader.hpp"

class Model {

public:
    Model( const vec3& position, const vec3& orientation, const vec3& scale, const vec3& joint, const int64_t color );
    Model( const Model& rhs );
    Model& operator=( const Model& rhs );
    ~Model( void );

    void            update( const mat4& parentTransform );
    void            render( Shader* shader );

    void            setPosition( const vec3& t ) { position = t; };
    void            setOrientation( const vec3& r ) { orientation = r; };
    void            setScale( const vec3& s ) { scale = s; };
    void            setJoint( const vec3& j ) { joint = j; };

    void            setScaling( const vec3& s ) { scaling = s; };
    void            setExternalTransform( const mat4& transform ) { externalTransform = transform; };

    const GLuint&   getVao( void ) const { return (vao); };
    const mat4&     getTransform( void ) const { return (nst); };
    const mat4&     getExternalTransform( void ) const { return (externalTransform); };

    const vec3&     getPosition( void ) const { return (position); };
    const vec3&     getOrientation( void ) const { return (orientation); };
    const vec3&     getScale( void ) const { return (scale); };
    const vec3&     getJoint( void ) const { return (joint); };

    const vec3&     getScaling( void ) const { return (scaling); };

    void            initBufferObjects( int mode = GL_STATIC_DRAW );
    vec4            hex2vec( int64_t hex );

private:
    GLuint      vao;               // Vertex Array Object
    GLuint      vbo;               // Vertex Buffer Object
    GLuint      ebo;               // Element Buffer Object (or indices buffer object, ibo)

    mat4        nst;               // the non-scaled version of the transform matrix
    mat4        transform;         // model matrix (for object transformations)
    mat4        externalTransform; // the tranform generated by the Animator's keyFrames

    /* the model position/orientation/scale relative to its parent local-space */
    vec3        position;
    vec3        orientation;
    vec3        scale;
    /* the joint is the  */
    vec3        joint;

    vec3        scaling; // the value changed in animation as a modifier

    vec4        color;

};
