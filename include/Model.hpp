#pragma once

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <iostream>
#include <string>
#include <stack>

#include "Exception.hpp"
#include "Matrix.hpp"
#include "Shader.hpp"
#include "utils.hpp"

enum class eModelType {
    cube,
    sphere,
    cylinder
};

class Model {

public:
    Model( const vec3& position, const vec3& orientation, const vec3& scale, const vec3& joint, const int64_t color );
    ~Model( void );

    void            update( const mat4& parentTransform, Shader* shader );
    void            render( Shader* shader );
    void            switchModel( short key );

    mat4            popMatrix( void );
    void            pushMatrix( void ) { stack.push(stack.top()); };
    void            pushMatrix( const mat4& mat ) { stack.push(mat); };

    /* getters */
    const GLuint&   getVao( void ) const { return (vao); };
    const mat4&     getTransform( void ) const { return (stack.top()); };
    const mat4&     getExternalTransform( void ) const { return (externalTransform); };
    const vec3&     getPosition( void ) const { return (position); };
    const vec3&     getOrientation( void ) const { return (orientation); };
    const vec3&     getScale( void ) const { return (scale); };
    const vec3&     getJoint( void ) const { return (joint); };
    const vec3&     getScaling( void ) const { return (scaling); };
    const vec3&     getWorldPosition( void ) const { return (worldPosition); };
    /* setters */
    void            setExternalTransform( const mat4& transform ) { externalTransform = transform; };
    void            setPosition( const vec3& t ) { position = t; };
    void            setOrientation( const vec3& r ) { orientation = r; };
    void            setScale( const vec3& s ) { scale = s; };
    void            setJoint( const vec3& j ) { joint = j; };
    void            setScaling( const vec3& s ) { scaling = s; };

    const bool      getSelected( void ) const { return (selected); };
    void            setSelected( bool b ) { selected = b; }; // DEBUG

    vec3            scaleExternal; // MEH

private:
    int                 nIndices;           // the number of triangles of the model
    GLuint              vao;                // Vertex Array Object
    GLuint              vbo;                // Vertex Buffer Object
    GLuint              ebo;                // Element Buffer Object (or indices buffer object, ibo)

    std::stack<mat4>    stack;              // the stack matrix
    mat4                externalTransform;  // the tranform generated by the Animator's keyFrames

    vec3                position;           // the position (parent local-space)
    vec3                orientation;        // the orientation (parent local-space)
    vec3                scale;              // the scale
    vec3                worldPosition;      // the position (world-space)

    vec3                joint;              // the joint around which the bone rotates (local-space)
    vec3                scaling;            // the value changed in animation as a modifier
    vec4                color;              // the color of the model

    bool                selected;           // true if the model is selected

    void                initBufferObjects( int mode = GL_STATIC_DRAW, eModelType modelType = eModelType::cube );
    void                updateWorldPosition( const mat4& parentTransform );

};
